module alu(A,B,ALUControl,Result,N,Z,C,V);

input [31:0] A,B;             //32-bit inputs A,B
input [2:0]ALUControl;        //ALUControl is the 3-bit signal from control unit to specify which operation to be performed by ALU

output [31:0]Result;          //Output of ALU is stored as 32-bit Result
output N,Z,C,V;               //declaring flags

wire [31:0] a_and_b;          //A AND B is stored in a_and_b
wire [31:0] a_or_b;           //A OR B is stored in a_or_b
wire [31:0] not_b;            //~B is stored in not_b
wire cout;                    //carry bit after addition

wire [31:0] alu_mux;          //2:1 mux to get B or ~B 
wire [31:0] sum;              //addition operation 
wire [31:0] mux;              //4:1 mux to get final result
wire [31:0] slt;              //set less than

assign a_and_b = A & B;       //defining A AND B
assign a_or_b = A | B;        //defining A OR B
assign not_b = ~B;            //defining NOT(B)

assign alu_mux = (ALUControl[0] == 1'b0) ? B : not_b;  //2:1 MUX based on Bit-0 of ALUControl signal
assign {cout,sum} = A+alu_mux + ALUControl[0];         //addition of A with either B or ~B and Bit-0 of ALUControl
assign mux = (ALUControl[2:0] == 3'b000) ? sum :        //4:1 MUX based on last 2 bits of ALUControl 
             (ALUControl[2:0] == 3'b001) ? sum : 
             (ALUControl[2:0] == 3'b010) ? a_and_b : 
             (ALUControl[2:0] == 3'b011) ? a_or_b :
             (ALUControl[2:0] == 3'b101) ? slt : 32'h00000000;
             
assign Result = mux;                                   //output of mux is stored as result

assign Z = &(~Result);   //zero flag 
assign N = Result[31];   //negative flag shows MSB of result to chech whether positive or negative
assign C = cout & (~ALUControl[1]); //carry flag
assign V = (~ALUControl[1]) & (A[31]^sum[31]) & (~(A[31]^B[31]^ALUControl[0]));  //overflow flag

//Zero extension
assign slt = {31'b0000000000000000000000000000000,sum[31]};

endmodule
